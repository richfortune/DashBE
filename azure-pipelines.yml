trigger:
  branches:
    include:
      - main  # La pipeline verrà eseguita solo su main.
      - develop  # La pipeline verrà eseguita anche su develop.

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  Configuration: 'Release'

steps:
  # Passaggio 1: Usa .NET SDK
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '8.0.x'

  # Passaggio 2: Compila tutti i progetti della soluzione
  - script: dotnet build DashBe/DashBe.sln --configuration $(Configuration)
    displayName: 'Build Solution'

  # Passaggio 3: Genera i pacchetti NuGet per ogni progetto
  - script: |
      dotnet pack DashBe/DashBe.Domain/DashBe.Domain.csproj --configuration $(Configuration) --output $(Build.ArtifactStagingDirectory)
      dotnet pack DashBe/DashBe.Application/DashBe.Application.csproj --configuration $(Configuration) --output $(Build.ArtifactStagingDirectory)
      dotnet pack DashBe/DashBe.Infrastructure/DashBe.Infrastructure.csproj --configuration $(Configuration) --output $(Build.ArtifactStagingDirectory)
    displayName: 'Pack NuGet Packages'

  # Passaggio 4: Pubblica i pacchetti NuGet su Azure Artifacts
  - script: |
      nuget.exe push "$(Build.ArtifactStagingDirectory)/*.nupkg" -Source "https://pkgs.dev.azure.com/x-code-group/CryptoSignature/_packaging/DashBeArtifacts/nuget/v3/index.json" -ApiKey "AzureArtifacts" -SkipDuplicate
    displayName: 'Push NuGet Packages to Azure Artifacts'
    env:
      VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/x-code-group/CryptoSignature/_packaging/DashBeArtifacts/nuget/v3/index.json", "username":"AzureDevOps", "password":"$(System.AccessToken)"}]}'

  # Passaggio 5: Debug - Verifica i file generati
  - script: dir $(Build.ArtifactStagingDirectory)
    displayName: 'Debug Artifact Staging Directory'
